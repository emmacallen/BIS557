data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
library(MASS)
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
library(MASS)
ridge_regression <- function(formula, data, lambda = 0, contrasts = NULL) {
# mitigate issue with folds
rownames(data) <- NULL
# model matrix
X <- model.matrix(formula, data, contrasts.arg= contrasts)
# response variable
Y <- data[[as.character(formula)[2]]][as.numeric(rownames(X))]
# rescaling
Xmean <- colMeans(X[, -1])
Ymean <- mean(Y)
# match lm.ridge function
X <- X[, -1] - rep(Xmean, rep(nrow(X), ncol(X) - 1))
Xscale <- drop(rep(1/nrow(X), nrow(X)) %*% X^2)^0.5
X <- X/rep(Xscale, rep(nrow(X), ncol(X)))
Y <- Y - Ymean
# beta matrix
coef <- matrix(NA_real_, nrow = length(lambda), ncol= ncol(X))
# svd to determine coefficients
svd<- svd(X)
D<- diag(svd$d / (svd$d^2 + lambda))
coef<- svd$v %*% D %*% t(svd$u) %*% Y
scaledcoef <- t(as.matrix(coef / Xscale))
# add intercept
intercept <- Ymean - scaledcoef %*% Xmean
coef <- cbind(intercept, scaledcoef)
# create output
coef<- as.vector(coef)
names(coef) <- c("Intercept", colnames(X))
attributes(coef)$formula <- form
class(coef)<- c(class(coef), "ridge_regression")
coef
}
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
library(MASS)
# MASS package corrupted, copied lm.ridge function code from https://github.com/cran/VR/blob/master/MASS/R/lm.ridge.R
lm.ridge <- function(formula, data, subset, na.action,
lambda = 0, model = FALSE, x = FALSE, y = FALSE, contrasts = NULL, ...)
{
m <- match.call(expand.dots = FALSE)
m$model <- m$x <- m$y <- m$contrasts <- m$... <- m$lambda <- NULL
m[[1L]] <- as.name("model.frame")
m <- eval.parent(m)
Terms <- attr(m, "terms")
Y <- model.response(m)
X <- model.matrix(Terms, m, contrasts)
n <- nrow(X); p <- ncol(X)
offset <- model.offset(m)
if(!is.null(offset)) Y <- Y - offset
if(Inter <- attr(Terms, "intercept"))
{
Xm <- colMeans(X[, -Inter])
Ym <- mean(Y)
p <- p - 1
X <- X[, -Inter] - rep(Xm, rep(n, p))
Y <- Y - Ym
} else Ym <- Xm <- NA
Xscale <- drop(rep(1/n, n) %*% X^2)^0.5
X <- X/rep(Xscale, rep(n, p))
Xs <- svd(X)
rhs <- t(Xs$u) %*% Y
d <- Xs$d
lscoef <-  Xs$v %*% (rhs/d)
lsfit <- X %*% lscoef
resid <- Y - lsfit
s2 <- sum(resid^2)/(n - p - Inter)
HKB <- (p-2)*s2/sum(lscoef^2)
LW <- (p-2)*s2*n/sum(lsfit^2)
k <- length(lambda)
dx <- length(d)
div <- d^2 + rep(lambda, rep(dx,k))
a <- drop(d*rhs)/div
dim(a) <- c(dx, k)
coef <- Xs$v %*% a
dimnames(coef) <- list(names(Xscale), format(lambda))
GCV <- colSums((Y - X %*% coef)^2)/(n-colSums(matrix(d^2/div, dx)))^2
res <- list(coef = drop(coef), scales = Xscale,
Inter = Inter, lambda = lambda, ym = Ym, xm = Xm,
GCV = GCV, kHKB = HKB, kLW = LW)
class(res) <- "ridgelm"
res
}
context("Test the output of ridge_regression().")
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your linear_model() function works with contrasts.", {
data(iris)
fit_lm_ridge <- MASS::lm.ridge(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"))
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your ridge_regression() function works in a tougher case.", {
data(lm_patho)
fit_lm_ridge <- MASS::lm.ridge(y ~., lm_patho)
fit_ridge_regression <- ridge_regression(y ~., lm_patho)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your linear_model() function works with contrasts.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"))
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your ridge_regression() function works in a tougher case.", {
data(lm_patho)
fit_lm_ridge <- lm.ridge(y ~., lm_patho)
fit_ridge_regression <- ridge_regression(y ~., lm_patho)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
# Data file for lm_patho
usethis::use_data()
# Data file for lm_patho
usethis::use_data(lm_patho)
# Data file for lm_patho
usethis::use_data_raw
usethis::use_data(installgithub/BIS557/homework-1-starter-code/master/lm_patho.csv)
# Data file for lm_patho
url<- https://raw.githubusercontent.com/BIS557/homework-1-starter-code/master/lm_patho.csv
# Data file for lm_patho
url<- "https://raw.githubusercontent.com/BIS557/homework-1-starter-code/master/lm_patho.csv"
usethis::use_data(url)
usethis::use_data_raw
usethis::use_data(url)
# Data file for lm_patho
lm_patho<- "https://raw.githubusercontent.com/BIS557/homework-1-starter-code/master/lm_patho.csv"
usethis::use_data_raw
usethis::use_data(lm_patho)
context("Test the output of ridge_regression().")
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
library(testthat)
library(MASS)
library(testthat)
# MASS package corrupted, copied lm.ridge function code from https://github.com/cran/VR/blob/master/MASS/R/lm.ridge.R
lm.ridge <- function(formula, data, subset, na.action,
lambda = 0, model = FALSE, x = FALSE, y = FALSE, contrasts = NULL, ...)
{
m <- match.call(expand.dots = FALSE)
m$model <- m$x <- m$y <- m$contrasts <- m$... <- m$lambda <- NULL
m[[1L]] <- as.name("model.frame")
m <- eval.parent(m)
Terms <- attr(m, "terms")
Y <- model.response(m)
X <- model.matrix(Terms, m, contrasts)
n <- nrow(X); p <- ncol(X)
offset <- model.offset(m)
if(!is.null(offset)) Y <- Y - offset
if(Inter <- attr(Terms, "intercept"))
{
Xm <- colMeans(X[, -Inter])
Ym <- mean(Y)
p <- p - 1
X <- X[, -Inter] - rep(Xm, rep(n, p))
Y <- Y - Ym
} else Ym <- Xm <- NA
Xscale <- drop(rep(1/n, n) %*% X^2)^0.5
X <- X/rep(Xscale, rep(n, p))
Xs <- svd(X)
rhs <- t(Xs$u) %*% Y
d <- Xs$d
lscoef <-  Xs$v %*% (rhs/d)
lsfit <- X %*% lscoef
resid <- Y - lsfit
s2 <- sum(resid^2)/(n - p - Inter)
HKB <- (p-2)*s2/sum(lscoef^2)
LW <- (p-2)*s2*n/sum(lsfit^2)
k <- length(lambda)
dx <- length(d)
div <- d^2 + rep(lambda, rep(dx,k))
a <- drop(d*rhs)/div
dim(a) <- c(dx, k)
coef <- Xs$v %*% a
dimnames(coef) <- list(names(Xscale), format(lambda))
GCV <- colSums((Y - X %*% coef)^2)/(n-colSums(matrix(d^2/div, dx)))^2
res <- list(coef = drop(coef), scales = Xscale,
Inter = Inter, lambda = lambda, ym = Ym, xm = Xm,
GCV = GCV, kHKB = HKB, kLW = LW)
class(res) <- "ridgelm"
res
}
context("Test the output of ridge_regression().")
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your linear_model() function works with contrasts.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"))
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your ridge_regression() function works in a tougher case.", {
data(lm_patho)
fit_lm_ridge <- lm.ridge(y ~., lm_patho)
fit_ridge_regression <- ridge_regression(y ~., lm_patho)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
# Data file for lm_patho
lm_patho<- "https://raw.githubusercontent.com/BIS557/homework-1-starter-code/master/lm_patho.csv"
usethis::use_data_raw
usethis::use_data(lm_patho)
context("Test the output of ridge_regression().")
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your linear_model() function works with contrasts.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"))
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
cross_validation <- function(formula, data, folds= 5, lambdas= seq(0, 0.5, 0.01), contrasts= NULL){
# R CMD check
i <- lambda <- `.` <- lower <- upper <- NULL
# create folds
folds <- vfold_cv(data,folds)
# nested loop to find root mean squared error for each lambda for each fold
rmses<- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(
testing(folds$splits[[i]])[[as.character(formula[2])]],
predict(ridge_regression(formula, training(folds$splits[[i]]),
lambda = lambda, contrasts= contrasts),
testing(folds$splits[[i]])))
}
}
# tibble of results
results <- tibble(mean =apply(rmse, 1, mean),
sd = apply(rmse, 1, sd),
lambda = lambdas) %>%
mutate(upper = mean + 2 * sd / nrow(.),
lower = mean - 2 * sd / nrow(.))
# lambda min
lambda_min <- results$lambda[which.min(results$mean)
)
}
cross_validation <- function(formula, data, folds= 5, lambdas= seq(0, 0.5, 0.01), contrasts= NULL){
# R CMD check
i <- lambda <- `.` <- lower <- upper <- NULL
# create folds
folds <- vfold_cv(data,folds)
# nested loop to find root mean squared error for each lambda for each fold
rmses<- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(
testing(folds$splits[[i]])[[as.character(formula[2])]],
predict(ridge_regression(formula, training(folds$splits[[i]]),
lambda = lambda, contrasts= contrasts),
testing(folds$splits[[i]])))
}
}
# tibble of results
results <- tibble(mean =apply(rmse, 1, mean),
sd = apply(rmse, 1, sd),
lambda = lambdas) %>%
mutate(upper = mean + 2 * sd / nrow(.),
lower = mean - 2 * sd / nrow(.))
# lambda min
lambda_min <- results$lambda[which.min(results$mean)]
}
library(testthat)
context("Test the output of cv_ridge_regression().")
test_that("Your cv_ridge_regression() function finds the same lambda.min with the same inputs in an easy case.", {
skip("cv_ridge_regression is currently unstable.")
data(iris)
fit_cv_glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris), as.matrix(iris[,1]), alpha = 0, lambda = seq(0, 1, 0.03))
fit_cv_ridge_regression <- cross_validation(Sepal.Length  ~ ., iris, folds = 2)
expect_equivalent(fit_cv_glmnet$lambda.min, fit_cv_ridge_regression$lambda_min,
tolerance = 1e-3)
})
test_that("Your cv_ridge_regression() function works with contrasts.", {
skip("cv_ridge_regression is currently unstable.")
data(iris)
fit_cv_glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris,
contrasts.arg = list(Species = "contr.sum")),
as.matrix(iris[,1]), alpha = 0, lambda = seq(0, 1, 0.03))
fit_cv_ridge_regression <- cv_ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"), folds = 2)
expect_equivalent(fit_cv_glmnet$lambda.min, fit_cv_ridge_regression$lambda_min,
tolerance = 1e-3)
})
#'
#' @return a tibble containing a summary of the statistics
#' @importFrom stats sd model.matrix predict var
#' @importFrom rsample vfold_cv testing training
#' @importFrom foreach %dopar% %do%
#' @importFrom magrittr %>%
#' @import casl dplyr ggplot2
#' @export
#'
#' @examples
cross_validation <- function(formula, data, folds= 5, lambdas= seq(0, 0.5, 0.01), contrasts= NULL){
# R CMD check
i <- lambda <- `.` <- lower <- upper <- NULL
# create folds
folds <- vfold_cv(data,folds)
# nested loop to find root mean squared error for each lambda for each fold
rmses<- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(
testing(folds$splits[[i]])[[as.character(formula[2])]],
predict(ridge_regression(formula, training(folds$splits[[i]]),
lambda = lambda, contrasts= contrasts),
testing(folds$splits[[i]])))
}
}
# tibble of results
results <- tibble(mean =apply(rmse, 1, mean),
sd = apply(rmse, 1, sd),
lambda = lambdas) %>%
mutate(upper = mean + 2 * sd / nrow(.),
lower = mean - 2 * sd / nrow(.))
ggplot(results, aes(x = lambdas, y = mean, ymin = lower, ymax = upper)) +
geom_errorbar() +
theme_minimal() +
geom_point(aes(color = "red")) +
ylab("Root Mean Square Error") +
xlab(expression(lambda))
# lambda min
lambda_min <- results$lambda[which.min(results$mean)]
}
library(testthat)
context("Test the output of cv_ridge_regression().")
test_that("Your cv_ridge_regression() function finds the same lambda.min with the same inputs in an easy case.", {
skip("cv_ridge_regression is currently unstable.")
data(iris)
fit_cv_glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris), as.matrix(iris[,1]), alpha = 0, lambda = seq(0, 1, 0.03))
fit_cv_ridge_regression <- cross_validation(Sepal.Length  ~ ., iris, folds = 2)
expect_equivalent(fit_cv_glmnet$lambda.min, fit_cv_ridge_regression$lambda_min,
tolerance = 1e-3)
})
test_that("Your cv_ridge_regression() function works with contrasts.", {
skip("cv_ridge_regression is currently unstable.")
data(iris)
fit_cv_glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris,
contrasts.arg = list(Species = "contr.sum")),
as.matrix(iris[,1]), alpha = 0, lambda = seq(0, 1, 0.03))
fit_cv_ridge_regression <- cv_ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"), folds = 2)
expect_equivalent(fit_cv_glmnet$lambda.min, fit_cv_ridge_regression$lambda_min,
tolerance = 1e-3)
})
#' Ridge Regression
#'
#'@description an implementation of ridge regression using singular value decomposition
#' @param form formula y ~ .
#' @param data dataframe
#' @param lambda ridge penalty term; default = 0
#' @param contrasts a list of contrasts
#'
#' @return List of beta coefficients
#' @export
#'
ridge_regression <- function(formula, data, lambda = 0, contrasts = NULL) {
# mitigate issue with folds
rownames(data) <- NULL
# model matrix
X <- model.matrix(formula, data, contrasts.arg= contrasts)
# response variable
Y <- data[[as.character(formula)[2]]][as.numeric(rownames(X))]
# rescaling
Xmean <- colMeans(X[, -1])
Ymean <- mean(Y)
# match the scaling of lm.ridge function
X <- X[, -1] - rep(Xmean, rep(nrow(X), ncol(X) - 1))
Xscale <- drop(rep(1/nrow(X), nrow(X)) %*% X^2)^0.5
X <- X/rep(Xscale, rep(nrow(X), ncol(X)))
Y <- Y - Ymean
# beta matrix
coef <- matrix(NA_real_, nrow = length(lambda), ncol= ncol(X))
# svd to determine coefficients
svd<- svd(X)
D<- diag(svd$d / (svd$d^2 + lambda))
coef<- svd$v %*% D %*% t(svd$u) %*% Y
scaledcoef <- t(as.matrix(coef / Xscale))
# add intercept
intercept <- Ymean - scaledcoef %*% Xmean
coef <- cbind(intercept, scaledcoef)
# create output
coef<- as.vector(coef)
names(coef) <- c("Intercept", colnames(X))
attributes(coef)$formula <- form
class(coef)<- c(class(coef), "ridge_regression")
coef
}
library(testthat)
# MASS package corrupted, copied lm.ridge function code from https://github.com/cran/VR/blob/master/MASS/R/lm.ridge.R
lm.ridge <- function(formula, data, subset, na.action,
lambda = 0, model = FALSE, x = FALSE, y = FALSE, contrasts = NULL, ...)
{
m <- match.call(expand.dots = FALSE)
m$model <- m$x <- m$y <- m$contrasts <- m$... <- m$lambda <- NULL
m[[1L]] <- as.name("model.frame")
m <- eval.parent(m)
Terms <- attr(m, "terms")
Y <- model.response(m)
X <- model.matrix(Terms, m, contrasts)
n <- nrow(X); p <- ncol(X)
offset <- model.offset(m)
if(!is.null(offset)) Y <- Y - offset
if(Inter <- attr(Terms, "intercept"))
{
Xm <- colMeans(X[, -Inter])
Ym <- mean(Y)
p <- p - 1
X <- X[, -Inter] - rep(Xm, rep(n, p))
Y <- Y - Ym
} else Ym <- Xm <- NA
Xscale <- drop(rep(1/n, n) %*% X^2)^0.5
X <- X/rep(Xscale, rep(n, p))
Xs <- svd(X)
rhs <- t(Xs$u) %*% Y
d <- Xs$d
lscoef <-  Xs$v %*% (rhs/d)
lsfit <- X %*% lscoef
resid <- Y - lsfit
s2 <- sum(resid^2)/(n - p - Inter)
HKB <- (p-2)*s2/sum(lscoef^2)
LW <- (p-2)*s2*n/sum(lsfit^2)
k <- length(lambda)
dx <- length(d)
div <- d^2 + rep(lambda, rep(dx,k))
a <- drop(d*rhs)/div
dim(a) <- c(dx, k)
coef <- Xs$v %*% a
dimnames(coef) <- list(names(Xscale), format(lambda))
GCV <- colSums((Y - X %*% coef)^2)/(n-colSums(matrix(d^2/div, dx)))^2
res <- list(coef = drop(coef), scales = Xscale,
Inter = Inter, lambda = lambda, ym = Ym, xm = Xm,
GCV = GCV, kHKB = HKB, kLW = LW)
class(res) <- "ridgelm"
res
}
context("Test the output of ridge_regression().")
test_that("Your ridge_regression() function works in an easy case.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, lambda = 0.1)
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
test_that("Your linear_model() function works with contrasts.", {
data(iris)
fit_lm_ridge <- lm.ridge(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
fit_ridge_regression <- ridge_regression(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"))
expect_equivalent(coef(fit_lm_ridge), fit_ridge_regression,
tolerance = 1e-3)
})
devtools::load_all(".")
install.packages("mctest")
library(mctest)
devtools::test()
library(testthat)
install.packages("testthat")
install.packages("testthat")
library(testthat)
devtools::load_all(‘.’)
devtools::load_all()
devtools::check()
install.packages("homework2")
library(testthat)
library(homework2)
test_check("homework2")
